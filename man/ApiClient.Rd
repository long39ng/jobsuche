% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_client.R
\docType{class}
\name{ApiClient}
\alias{ApiClient}
\title{ApiClient}
\format{
An \code{R6Class} generator object
}
\description{
ApiClient Class
}
\details{
Arbeitsagentur Jobsuche API

Die größte Stellendatenbank Deutschlands durchsuchen, Details zu Stellenanzeigen und Informationen über Arbeitgeber abrufen. <br><br>Die Authentifizierung funktioniert über die clientId:<br><br>clientId: jobboerse-jobsuche<br><br>Bei folgenden GET-requests ist die clientId als Header-Parameter 'X-API-Key' zu übergeben.

The version of the OpenAPI document: 2.0.2
Generated by: https://openapi-generator.tech

ApiClient Class

Generic API client for OpenAPI client library builds.
OpenAPI generic API client. This client handles the client-
server communication, and is invariant across implementations. Specifics of
the methods and models for each application are generated from the OpenAPI Generator
templates.

NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
Ref: https://openapi-generator.tech
Do not edit the class manually.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{base_path}}{Base url}

\item{\code{user_agent}}{Default user agent}

\item{\code{default_headers}}{Default headers}

\item{\code{username}}{Username for HTTP basic authentication}

\item{\code{password}}{Password for HTTP basic authentication}

\item{\code{api_keys}}{API keys}

\item{\code{bearer_token}}{Bearer token}

\item{\code{timeout}}{Default timeout in seconds}

\item{\code{retry_status_codes}}{vector of status codes to retry}

\item{\code{max_retry_attempts}}{maximum number of retries for the status codes}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ApiClient-new}{\code{ApiClient$new()}}
\item \href{#method-ApiClient-CallApi}{\code{ApiClient$CallApi()}}
\item \href{#method-ApiClient-Execute}{\code{ApiClient$Execute()}}
\item \href{#method-ApiClient-deserialize}{\code{ApiClient$deserialize()}}
\item \href{#method-ApiClient-deserializeObj}{\code{ApiClient$deserializeObj()}}
\item \href{#method-ApiClient-select_header}{\code{ApiClient$select_header()}}
\item \href{#method-ApiClient-DeserializeResponse}{\code{ApiClient$DeserializeResponse()}}
\item \href{#method-ApiClient-WriteFile}{\code{ApiClient$WriteFile()}}
\item \href{#method-ApiClient-IsBinary}{\code{ApiClient$IsBinary()}}
\item \href{#method-ApiClient-clone}{\code{ApiClient$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new ApiClient.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$new(
  base_path = NULL,
  user_agent = NULL,
  default_headers = NULL,
  username = NULL,
  password = NULL,
  api_keys = NULL,
  access_token = NULL,
  bearer_token = NULL,
  timeout = NULL,
  retry_status_codes = NULL,
  max_retry_attempts = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_path}}{Base path.}

\item{\code{user_agent}}{User agent.}

\item{\code{default_headers}}{Default headers.}

\item{\code{username}}{User name.}

\item{\code{password}}{Password.}

\item{\code{api_keys}}{API keys.}

\item{\code{access_token}}{Access token.}

\item{\code{bearer_token}}{Bearer token.}

\item{\code{timeout}}{Timeout.}

\item{\code{retry_status_codes}}{Status codes for retry.}

\item{\code{max_retry_attempts}}{Maximum number of retry.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-CallApi"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-CallApi}{}}}
\subsection{Method \code{CallApi()}}{
Prepare to make an API call with the retry logic.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$CallApi(
  url,
  method,
  query_params,
  header_params,
  form_params,
  file_params,
  accepts,
  content_types,
  body,
  is_oauth = FALSE,
  oauth_scopes = NULL,
  stream_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{URL.}

\item{\code{method}}{HTTP method.}

\item{\code{query_params}}{The query parameters.}

\item{\code{header_params}}{The header parameters.}

\item{\code{form_params}}{The form parameters.}

\item{\code{file_params}}{The form parameters to upload files.}

\item{\code{accepts}}{The HTTP accept headers.}

\item{\code{content_types}}{The HTTP content-type headers.}

\item{\code{body}}{The HTTP request body.}

\item{\code{is_oauth}}{True if the endpoints required OAuth authentication.}

\item{\code{oauth_scopes}}{OAuth scopes.}

\item{\code{stream_callback}}{Callback function to process the data stream.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
HTTP response
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-Execute"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-Execute}{}}}
\subsection{Method \code{Execute()}}{
Make an API call
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$Execute(
  req,
  method,
  query_params,
  header_params,
  form_params,
  file_params,
  accepts,
  content_types,
  body,
  is_oauth = FALSE,
  oauth_scopes = NULL,
  stream_callback = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{req}}{httr2 request.}

\item{\code{method}}{HTTP method.}

\item{\code{query_params}}{The query parameters.}

\item{\code{header_params}}{The header parameters.}

\item{\code{form_params}}{The form parameters.}

\item{\code{file_params}}{The form parameters for uploading files.}

\item{\code{accepts}}{The HTTP accept headers.}

\item{\code{content_types}}{The HTTP content-type headers.}

\item{\code{body}}{The HTTP request body.}

\item{\code{is_oauth}}{True if the endpoints required OAuth authentication.}

\item{\code{oauth_scopes}}{OAuth scopes.}

\item{\code{stream_callback}}{Callback function to process data stream.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
HTTP response
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-deserialize"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-deserialize}{}}}
\subsection{Method \code{deserialize()}}{
Deserialize the content of API response to the given type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$deserialize(raw_response, return_type, pkg_env)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{raw_response}}{Raw response.}

\item{\code{return_type}}{R return type.}

\item{\code{pkg_env}}{Package environment.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Deserialized object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-deserializeObj"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-deserializeObj}{}}}
\subsection{Method \code{deserializeObj()}}{
Deserialize the response from jsonlite object based on the given type.
by handling complex and nested types by iterating recursively
Example return_types will be like "array[integer]", "map(Pet)", "array[map(Tag)]", etc.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$deserializeObj(obj, return_type, pkg_env)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obj}}{Response object.}

\item{\code{return_type}}{R return type.}

\item{\code{pkg_env}}{Package environment.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Deserialized object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-select_header"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-select_header}{}}}
\subsection{Method \code{select_header()}}{
Return a property header (for accept or content-type). If JSON-related MIME is found,
return it. Otherwise, return the first one, if any.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$select_header(headers)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{headers}}{A list of headers}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A header (e.g. 'application/json')
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-DeserializeResponse"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-DeserializeResponse}{}}}
\subsection{Method \code{DeserializeResponse()}}{
Deserialize the response
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$DeserializeResponse(local_var_resp, return_type = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{local_var_resp}}{The API response}

\item{\code{return_type}}{The target return type for the endpoint (e.g., `"object"`). If `NULL` text will be left as-is.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
If the raw response is corecable to text, return the text. Otherwise return the raw response.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-WriteFile"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-WriteFile}{}}}
\subsection{Method \code{WriteFile()}}{
Write response to a file

The function will write out data.

1. If binary data is detected it will use `writeBin`
2. If the raw response is coercible to text, the text will be written to a file
3. If the raw response is not coercible to text, the raw response will be written
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$WriteFile(local_var_resp, file)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{local_var_resp}}{The API response}

\item{\code{file}}{The name of the data file to save the result}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-IsBinary"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-IsBinary}{}}}
\subsection{Method \code{IsBinary()}}{
Check response for binary content
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$IsBinary(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{local_var_resp}}{The API response}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ApiClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ApiClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ApiClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
